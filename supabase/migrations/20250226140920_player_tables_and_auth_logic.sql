create schema if not exists "player";

GRANT USAGE ON SCHEMA "player" TO anon, authenticated, service_role;
GRANT ALL ON ALL TABLES IN SCHEMA "player" TO anon, authenticated, service_role;
GRANT ALL ON ALL ROUTINES IN SCHEMA "player" TO anon, authenticated, service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA "player" TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA "player" GRANT ALL ON TABLES TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA "player" GRANT ALL ON ROUTINES TO anon, authenticated, service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA "player" GRANT ALL ON SEQUENCES TO anon, authenticated, service_role;


create table "player"."player" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone,
    "deleted_at" timestamp with time zone,
    "username" character varying,
    "first_name" character varying,
    "last_name" character varying,
    "is_guest" boolean not null default false,
    "user_id" uuid
);


alter table "player"."player" enable row level security;

create table "player"."player_has_room" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "is_host" boolean not null default false,
    "room_id" integer not null,
    "player_id" uuid not null
);


alter table "player"."player_has_room" enable row level security;

create table "player"."room" (
    "id" integer generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "max_players" smallint,
    "deleted_at" timestamp with time zone
);


alter table "player"."room" enable row level security;

CREATE UNIQUE INDEX player_has_room_pkey ON player.player_has_room USING btree (id);

CREATE UNIQUE INDEX player_pkey ON player.player USING btree (id);

CREATE UNIQUE INDEX player_user_id_key ON player.player USING btree (user_id);

CREATE UNIQUE INDEX room_pkey ON player.room USING btree (id);

alter table "player"."player" add constraint "player_pkey" PRIMARY KEY using index "player_pkey";

alter table "player"."player_has_room" add constraint "player_has_room_pkey" PRIMARY KEY using index "player_has_room_pkey";

alter table "player"."room" add constraint "room_pkey" PRIMARY KEY using index "room_pkey";

alter table "player"."player" add constraint "player_player_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "player"."player" validate constraint "player_player_user_id_fkey";

alter table "player"."player" add constraint "player_user_id_key" UNIQUE using index "player_user_id_key";

alter table "player"."player_has_room" add constraint "player_player_has_room_player_id_fkey" FOREIGN KEY (player_id) REFERENCES player.player(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "player"."player_has_room" validate constraint "player_player_has_room_player_id_fkey";

alter table "player"."player_has_room" add constraint "player_player_has_room_room_id_fkey" FOREIGN KEY (room_id) REFERENCES player.room(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "player"."player_has_room" validate constraint "player_player_has_room_room_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION player.create_player_for_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into player.player (user_id)
  values (new.id);
  return new;
end;
$function$
;

create policy "Authenticated users can access their own player"
on "player"."player"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Authenticated users can update their own player"
on "player"."player"
as permissive
for update
to public
using ((auth.uid() = user_id));



